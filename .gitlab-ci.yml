stages:
  - build
  - publish
  - deploy

before_script:
  - apt-get update -qy
  - apt-get install -y openjdk-17-jdk

build-job:
  stage: build
  image: adoptopenjdk:17-jdk-hotspot  # Use a Docker image with Java 17 and Maven
  tags:
    - deployment
  script:
    - java --version  # Print Java version information
    - mvn clean install  # Run Maven build
  artifacts:
    paths:
      - target/*.jar  # Define artifacts to be stored after the job
  only:
    - develop/login-authentication  # Define when the job should be executed

publish-job:
  image: docker:latest
  stage: publish
  tags:
    - deployment
  variables:
    # these values may need to be different if using TLS, k8s, etc.
    # You can alternatively set defaults in your runner config
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: "tcp://docker:2375"
  services:
    - docker:dind
  script:
    - pwd
    - echo $SERVER_IP
    - docker --version
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io
    - docker build -t docker.io/group12project/llm_insights:$CI_COMMIT_SHORT_SHA .
    - docker push docker.io/group12project/llm_insights:$CI_COMMIT_SHORT_SHA
  only:
    - develop/login-authentication

deploy-job:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull docker.io/group12project/llm_insights:$CI_COMMIT_SHORT_SHA"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f my-app || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 8073:8073 --name my-app docker.io/group12project/llm_insights:$CI_COMMIT_SHORT_SHA"
  environment:
    name: production
    url: http://csci5308vm12:8073
  only:
    - develop/login-authentication